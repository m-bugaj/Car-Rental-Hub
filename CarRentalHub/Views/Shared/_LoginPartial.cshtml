@using Microsoft.AspNetCore.Identity
@using CarRentalHub.Areas.Identity.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0">Logout</button>
        </form>
    </li>
}
else
{
    
        // Get the current URL
    var currentPage = Context.Request.Path;

        // Check that the page is not located at /Identity/Account/Login
    var isNotLoginPage = !currentPage.Equals("/Identity/Account/Login", StringComparison.OrdinalIgnoreCase);
    var isNotRegisterPage = !currentPage.Equals("/Identity/Account/Register", StringComparison.OrdinalIgnoreCase);
    

    @if (isNotLoginPage && isNotRegisterPage)
    {
            <!-- HTML code to be executed only if the page is not at /Identity/Account/Login -->
        <li class="nav-item">
            <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
}


</ul>
